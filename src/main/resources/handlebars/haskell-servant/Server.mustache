{-# OPTIONS_GHC -fno-warn-unused-binds -fno-warn-unused-imports -freduction-depth=0 #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE ViewPatterns #-}

module {{title}}.Server where

import {{title}}.API
import {{title}}.Common
import {{title}}.Types

import Control.Monad.IO.Class (MonadIO(..))
import Data.Coerce (coerce)
import Data.Function ((&))
import qualified Data.Map as Map
import Data.Proxy (Proxy(..))
import Data.String (IsString(fromString))
import Data.Text (Text)
import qualified Network.Wai.Handler.Warp as Warp
import Prelude
import Servant.API
import Servant.Server (Handler, serve)


{{#apiInfo}}
-- | Backend for {{title}}.
-- The backend can be used both for the client and the server. The client generated from the {{title}} Swagger spec
-- is a backend that executes actions by sending HTTP requests (see @create{{title}}Client@). Alternatively, provided
-- a backend, the API can be served using @run{{title}}Server@.
data {{title}}Backend m = {{title}}Backend
  { {{#apis}}{{#operations}}{{#operation}}{{operationId}} :: {{& vendorExtensions.x-clientType}}    {- ^ {{& notes}} -}{{#hasMore}}
  , {{/hasMore}}{{/operation}}{{/operations}}{{#hasMore}}
  , {{/hasMore}}{{/apis}}
  }

-- | Run the {{title}} server at the provided host and port.
run{{title}}Server :: MonadIO m => Warp.HostPreference -> Warp.Port -> {{title}}Backend Handler -> m ()
run{{title}}Server host port backend =
  liftIO $ Warp.runSettings warpSettings $ serve (Proxy :: Proxy {{title}}API) (serverFromBackend backend)
  where
    warpSettings = Warp.defaultSettings
                 & Warp.setPort port
                 & Warp.setHost host

    serverFromBackend {{title}}Backend{..} =
      ({{#apis}}{{#operations}}{{#operation}}coerce {{operationId}}{{#hasMore}} :<|>
       {{/hasMore}}{{/operation}}{{/operations}}{{#hasMore}} :<|>
       {{/hasMore}}{{/apis}})

{{/apiInfo}}
