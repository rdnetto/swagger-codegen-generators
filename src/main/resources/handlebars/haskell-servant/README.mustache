# Auto-Generated Swagger Bindings to `{{title}}`

The library in `lib` provides auto-generated-from-Swagger bindings to the {{title}} API.

## Installation

Installation follows the standard approach to installing Stack-based projects.

1. Install the [Haskell `stack` tool](http://docs.haskellstack.org/en/stable/README).
2. Run `stack install` to install this package.

## Using as a Client

Calls to endpoints are defined in the `{{title}}.Client` module, as functions in a monad satisfying the `{{title}}ClientMonad` typeclass.
This is typically satisfied by the `{{title}}Client` monad (and associated transformer) from the `{{title}}.ClientT` module.

To actually run the monad with `runClient`, you will need to provide a hostname and port, like so:

```haskell
import {{title}}.Client
import {{title}}.ClientT
import Network.HTTP.Client (newManager, defaultManagerSettings)
import Servant.Client (BaseUrl(..), Scheme(Http), mkClientEnv)

main :: IO ()
main = do
  manager <- newManager defaultManagerSettings
  let baseUrl = BaseUrl Http "localhost" 80 "/"
      clientEnv = mkClientEnv manager baseUrl

  res <- runClient clientEnv $ do
    -- Any {{title}} API call can go here.
    return ()

  case res of
       Left err -> print err
       Right () -> return ()
```

## Creating a Server

In order to create a server, you must use the `run{{title}}Server` function. To
specify the handling of the different endpoints, you should provide a
`{{title}}Backend`. For example, if you have defined handler functions for all
the functions in `{{title}}.Handlers`, you can write:

```haskell
{-# LANGUAGE RecordWildCards #-}

import {{title}}.Server

-- A module you wrote yourself, containing all handlers needed for the {{title}}Backend type.
import {{title}}.Handlers

-- Run a {{title}} server on localhost:8080
main :: IO ()
main = do
  let server = {{title}}Backend{..}
  run{{title}}Server "localhost" 8080 server
```

